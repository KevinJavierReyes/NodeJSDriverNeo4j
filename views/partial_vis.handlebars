<style>
    #loading{
        display: flex;
        justify-content: center;
        align-items: center;
        position: fixed;
        flex-direction: column;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: #0E1E2F;
        z-index:100;
        opacity: 0.5;
    }
    #loading img {
        width: 300px;
    }
    #loading h2 {
        color: aliceblue;
    }

    /*.vis-configuration-wrapper{
            position: absolute;
            top: 0;
            z-index: 9000000;
    }

    div.vis-configuration-wrapper {
            width: 100%;
    }*/
</style>
<div id="loading">
    <img src="https://i.pinimg.com/originals/e9/29/1e/e9291eaddacd460280a34a151dcc5cc4.gif" alt="">
    <h2>Creando grafico...</h2>
</div>
<div id="vis" style="width: 100%; height: 100%; position: fixed; left:0; top:0;"></div> 
<div class="col-3">
    <div id="options" class="card" style="box-shadow: 0px 0px 5px 1p rgba(0,0,0,0.5);">
        <div class="card-header">
            Filtros
        </div>
        <div class="card-body">
            <!--Default date and time picker -->
            <div class="form-group">
                <div class="input-group date form-group" id="datetimepicker1"
                    data-target-input="nearest">
                    <label class="col-12">Desde : </label>
                    <input type="text" id="desde" class="form-control
                        datetimepicker-input" placeholder="YYYY-MM-DD hh:mm a"
                        data-target="#datetimepicker1" />
                    <div class="input-group-append"
                        data-target="#datetimepicker1"
                        data-toggle="datetimepicker">
                        <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                    </div>
                </div>
            </div>
            <!--Default date and time picker -->
            <div class="form-group">
                <div class="input-group date form-group" id="datetimepicker2"
                    data-target-input="nearest">
                    <label class="col-12">Hasta : </label>
                    <input type="text" id="hasta" class="form-control
                        datetimepicker-input" data-target="#datetimepicker2"
                        placeholder="YYYY-MM-DD hh:mm a" />
                    <div class="input-group-append"
                        data-target="#datetimepicker2"
                        data-toggle="datetimepicker">
                        <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                    </div>
                </div>
            </div>

            <button id="filter" class="btn btn-primary col-12">
                Filtrar
            </button>
        </div>
    </div>
</div>
<script type="text/javascript">
    var container_vis;
    var element_vis;
    var loading;
    var showed = false;


    $(function () {
        container_vis = document.getElementById("vis")
        loading = document.getElementById("loading");

        requestData()
        $('#datetimepicker1').datetimepicker({
            format:"YYYY-MM-DD hh:mm a"
        });
        $('#datetimepicker2').datetimepicker({
            format:"YYYY-MM-DD hh:mm a"
        });
        $('#datetimepicker1').click();
        $('#datetimepicker2').click();
        $('#filter').on("click", function(){
            if($('#desde').val() != "" && $('#hasta').val() != ""){
                let desde = datetimeStringToFormatDateTime($('#desde').val())
                let hasta = datetimeStringToFormatDateTime($('#hasta').val())
                requestData(query=`?start=${desde}&end=${hasta}`)
            }
        })
    });

    function showProgress(){
        loading.style.display = "flex";
    }

    function hideProgress(){
        loading.style.display = "none";
    }

    async function requestData(query=""){
        showProgress()
        showed = false
        let request = await fetch("/api/v1/data"+ query)
        let data = await request.json()
        if(element_vis)
            element_vis.setData({nodes: data.nodes.splice(0,1000), edges: data.edges.splice(0,1000)})
        else
            element_vis = new vis.Network(container_vis, {nodes: data.nodes.splice(0,1000), edges: data.edges.splice(0,1000)}, {
                nodes: {
                    shape: "dot",
                    size: 40,
                    font: "16px verdana #000",
                    shadow: {
                        enabled: true
                    }
                },
                physics: {
                    repulsion: {
                        centralGravity: 0,
                        nodeDistance: 100
                    },
                    maxVelocity: 10,
                    minVelocity: 0.75,
                    solver: "repulsion",
                    timestep: 0.85
                },
                layout: {
                    randomSeed: 2
                },
                edges: {
                    arrows: {
                        to: {
                            enabled: true,
                            type: "arrow",
                            scaleFactor:1
                        }
                    },
                    dashes: true,
                    color:{
                        color:"#476FE0",
                        highlight:"#C7254E",
                        hover:"#C7254E",
                        opacity:1
                    },
                    smooth: {
                        forceDirection: "none",
                        roundness: 0
                    }
                }
            })
        element_vis.on("afterDrawing", function (ctx) {
            if(!showed){
                showed = true
                element_vis.setOptions({
                    physics:{
                        hierarchicalRepulsion: {
                            centralGravity: 0,
                            springLength: 500,
                            nodeDistance: 1,
                            avoidOverlap: 1,
                            damping:1
                        },
                        solver: "hierarchicalRepulsion"
                    }
                })
                element_vis.on("afterDrawing", function (ctx) {})
                hideProgress()
            }
        });
    }

    function datetimeStringToFormatDateTime(datetime){
        let date = datetime.substr(0,10)
        let time = datetime.substr(11,)
        let hour = time.substr(0,2)
        let minute = time.substr(3,2)
        let p = time.substr(6,2)
        
        if(p == "pm"){
            hour =  parseInt(hour) + 12 
        }
        return `${date}T${hour}:${minute}`
    }
</script>